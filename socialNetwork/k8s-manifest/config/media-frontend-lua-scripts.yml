apiVersion: v1
kind: ConfigMap
metadata:
  name: media-frontend-lua-scripts
  namespace: social-network
data:
  get-media.lua: |
    local _M = {}
    local k8s_suffix = os.getenv("fqdn_suffix")
    if (k8s_suffix == nil) then
      k8s_suffix = ""
    end

    local function _StrIsEmpty(s)
      return s == nil or s == ''
    end

    local function _StringSplit(input_str, sep)
      if sep == nil then
        sep = "%s"
      end
      local t = {}
      for str in string.gmatch(input_str, "([^"..sep.."]+)") do
        table.insert(t, str)
      end
      return t
    end

    function _M.GetMedia()
      local mongo = require "resty-mongol"
      local ngx = ngx

      local chunk_size = 255 * 1024

      ngx.req.read_body()
      local args = ngx.req.get_uri_args()
      if (_StrIsEmpty(args.filename)) then
        ngx.status = ngx.HTTP_BAD_REQUEST
        ngx.say("Incomplete arguments")
        ngx.log(ngx.ERR, "Incomplete arguments")
        ngx.exit(ngx.HTTP_BAD_REQUEST)
      end


      local conn = mongo()
      conn:set_timeout(1000)
      local ok, err = conn:connect("media-mongodb" .. k8s_suffix, 27017)
      if not ok then
        ngx.log(ngx.ERR, "mongodb connect failed: "..err)
      end
      local db = conn:new_db_handle("media")
      local col = db:get_col("media")

      local media = col:find_one({filename=args.filename})
      if not media then
        ngx.log(ngx.ERR, "mongodb failed to find: ".. args.filename)
        return
      end

      local media_file = media.file

      local filename_list = _StringSplit(args.filename, '.')
      local media_type = filename_list[#filename_list]

      ngx.header.content_type = "image/" .. media_type
      ngx.say(media_file)

    end

    return _M
  upload-media.lua: |
    local _M = {}
    local k8s_suffix = os.getenv("fqdn_suffix")
    if (k8s_suffix == nil) then
      k8s_suffix = ""
    end

    local function _StringSplit(input_str, sep)
      if sep == nil then
        sep = "%s"
      end
      local t = {}
      for str in string.gmatch(input_str, "([^"..sep.."]+)") do
        table.insert(t, str)
      end
      return t
    end

    function _M.UploadMedia()
      local upload = require "resty.upload"
      local mongo = require "resty-mongol"
      local cjson = require "cjson"
      local ngx = ngx

      local chunk_size = 8196
      local form, err = upload:new(chunk_size)
      if not form then
        ngx.log(ngx.ERR, "failed to new upload: ", err)
        ngx.exit(500)
      end

      form:set_timeout(1000)
      local media_id = tonumber(string.sub(ngx.var.request_id, 0, 15), 16)
      media_id = string.format("%.f", media_id)
      local media_file = ""
      local media_type

      while true do
        local typ, res, err = form:read()
        if not typ then
          ngx.say("failed to read: ", err)
          return
        end

        if typ == "header" then
          for i, ele in ipairs(res) do
            local filename = string.match(ele, 'filename="(.*)"')
            if filename and filename ~= '' then
              local filename_list = _StringSplit(filename, '.')
              media_type = filename_list[#filename_list]
            end
          end
        elseif typ == "body" then
          media_file = media_file .. res
        elseif typ == "part_end" then

        elseif typ == "eof" then
          break
        end
      end

      local conn = mongo()
      conn:set_timeout(1000)
      local ok, err = conn:connect("media-mongodb" .. k8s_suffix, 27017)
      if not ok then
        ngx.log(ngx.ERR, "mongodb connect failed: "..err)
      end
      local db = conn:new_db_handle("media")
      local col = db:get_col("media")

      local media = {
        filename = media_id .. '.' ..  media_type,
        file = media_file
      }
      col:insert({media})
      conn:set_keepalive(60000, 100)
      ngx.header.content_type = "application/json; charset=utf-8"
      ngx.say(cjson.encode({media_id = media_id, media_type = media_type}))

    end

    return _M